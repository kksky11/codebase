"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var _require = require('cross-storage'),
    CrossStorageHub = _require.CrossStorageHub,
    CrossStorageClient = _require.CrossStorageClient;

var utility = require('./utility');

var _require2 = require('./crypto'),
    encrypt = _require2.encrypt,
    decrypt = _require2.decrypt;

var customStorage = /*#__PURE__*/function () {
  function customStorage(subDomainRegex, hubPage, _gucId) {
    _classCallCheck(this, customStorage);

    this.isHub = window.location.host === new URL(hubPage).host && window.location.pathname === new URL(hubPage).pathname;
    this.gucId = _gucId;

    if (this.isHub) {
      CrossStorageHub.init([{
        origin: subDomainRegex,
        allow: ['get', 'set']
      }]);
    } else {
      this.storage = new CrossStorageClient(hubPage, {
        timeout: 600000,
        frameId: 'pbgucIframeStorage'
      }); // 10 minutes
    }

    this.get = this.get;
  }

  _createClass(customStorage, [{
    key: "initialize",
    value: function () {
      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(gucId, siteId, visitId) {
        var _this2 = this;

        var storageObj, curTime, initialObj, fullInitialObj;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.gucId = gucId;

                if (!this.isHub) {
                  _context.next = 5;
                  break;
                }

                _context.t0 = window.localStorage.getItem(gucId);
                _context.next = 8;
                break;

              case 5:
                _context.next = 7;
                return this.storage.onConnect().then(function () {
                  return _this2.storage.get(gucId);
                });

              case 7:
                _context.t0 = _context.sent;

              case 8:
                storageObj = _context.t0;
                storageObj = decrypt(utility.secretKey, storageObj);

                if (!(!utility.isEmpty(storageObj) && !utility.isEmpty(JSON.parse(storageObj)[siteId]) || gucId == undefined || visitId == undefined)) {
                  _context.next = 12;
                  break;
                }

                return _context.abrupt("return");

              case 12:
                curTime = utility.currentTime();
                initialObj = {
                  createdAt: curTime,
                  updatedAt: curTime
                };

                if (!utility.isEmpty(visitId)) {
                  initialObj.visit = visitId;
                }

                if (!utility.isEmpty(storageObj)) {
                  _context.next = 20;
                  break;
                }

                fullInitialObj = _defineProperty({}, siteId, initialObj);
                fullInitialObj = JSON.stringify(fullInitialObj);
                fullInitialObj = encrypt(utility.secretKey, fullInitialObj);
                return _context.abrupt("return", this.isHub ? window.localStorage.setItem(gucId, fullInitialObj) : this.storage.onConnect().then(function () {
                  return _this2.storage.set(gucId, fullInitialObj);
                }));

              case 20:
                _context.next = 22;
                return this.set(siteId, initialObj);

              case 22:
                return _context.abrupt("return", _context.sent);

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initialize(_x, _x2, _x3) {
        return _initialize.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "set",
    value: function () {
      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key, value) {
        var _this3 = this;

        var storageObj;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(typeof key !== "string" || key == undefined)) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", undefined);

              case 2:
                _context2.next = 4;
                return this.get();

              case 4:
                storageObj = _context2.sent;
                storageObj[key] = value;
                storageObj = JSON.stringify(storageObj);
                storageObj = encrypt(utility.secretKey, storageObj);

                if (!this.isHub) {
                  _context2.next = 12;
                  break;
                }

                _context2.t0 = window.localStorage.setItem(this.gucId, storageObj);
                _context2.next = 15;
                break;

              case 12:
                _context2.next = 14;
                return this.storage.onConnect().then(function () {
                  return _this3.storage.set(_this3.gucId, storageObj);
                });

              case 14:
                _context2.t0 = _context2.sent;

              case 15:
                return _context2.abrupt("return", _context2.t0);

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function set(_x4, _x5) {
        return _set.apply(this, arguments);
      }

      return set;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {
        var _this4 = this;

        var storageObj;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(key && typeof key !== "string")) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", undefined);

              case 2:
                if (!this.isHub) {
                  _context3.next = 6;
                  break;
                }

                _context3.t0 = window.localStorage.getItem(this.gucId);
                _context3.next = 9;
                break;

              case 6:
                _context3.next = 8;
                return this.storage.onConnect().then(function () {
                  return _this4.storage.get(_this4.gucId);
                });

              case 8:
                _context3.t0 = _context3.sent;

              case 9:
                storageObj = _context3.t0;
                storageObj = decrypt(utility.secretKey, storageObj);

                if (!utility.isEmpty(storageObj)) {
                  _context3.next = 15;
                  break;
                }

                return _context3.abrupt("return", storageObj);

              case 15:
                storageObj = JSON.parse(storageObj);

              case 16:
                if (!utility.isEmpty(key)) {
                  _context3.next = 18;
                  break;
                }

                return _context3.abrupt("return", storageObj);

              case 18:
                return _context3.abrupt("return", storageObj[key]);

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function get(_x6) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "getSiteItem",
    value: function () {
      var _getSiteItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(site) {
        var key,
            allSites,
            _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                key = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : undefined;

                if (!(typeof site !== 'string')) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return", undefined);

              case 3:
                _context4.next = 5;
                return this.get();

              case 5:
                allSites = _context4.sent;

                if (!(utility.isEmpty(allSites) || utility.isEmpty(allSites[site]))) {
                  _context4.next = 8;
                  break;
                }

                return _context4.abrupt("return", undefined);

              case 8:
                if (!(typeof key !== 'string')) {
                  _context4.next = 10;
                  break;
                }

                return _context4.abrupt("return", allSites[site]);

              case 10:
                return _context4.abrupt("return", allSites[site][key]);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getSiteItem(_x7) {
        return _getSiteItem.apply(this, arguments);
      }

      return getSiteItem;
    }()
  }, {
    key: "setSiteItem",
    value: function () {
      var _setSiteItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(site, key) {
        var val,
            maxRetry,
            _this,
            allSites,
            _args6 = arguments;

        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                val = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : "";

                if (!(typeof key !== "string")) {
                  _context6.next = 3;
                  break;
                }

                return _context6.abrupt("return", undefined);

              case 3:
                maxRetry = 5;
                _this = this;
                _context6.next = 7;
                return new Promise(function (resolve, reject) {
                  var _interval = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
                    var _allData;

                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            _context5.next = 2;
                            return _this.get();

                          case 2:
                            _allData = _context5.sent;
                            --maxRetry;

                            if (!utility.isEmpty(_allData) || maxRetry === 0) {
                              resolve(_allData);
                              clearInterval(_interval);
                            }

                          case 5:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  })), 300);
                });

              case 7:
                allSites = _context6.sent;

                if (!utility.isEmpty(allSites)) {
                  _context6.next = 10;
                  break;
                }

                return _context6.abrupt("return", undefined);

              case 10:
                if (!(allSites && allSites[site])) {
                  _context6.next = 15;
                  break;
                }

                allSites[site][key] = val;
                allSites[site]['updatedAt'] = utility.currentTime();
                _context6.next = 15;
                return this.set(site, allSites[site]);

              case 15:
                return _context6.abrupt("return", true);

              case 16:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function setSiteItem(_x8, _x9) {
        return _setSiteItem.apply(this, arguments);
      }

      return setSiteItem;
    }()
  }, {
    key: "setData",
    value: function () {
      var _setData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(site, dataObj) {
        var requiredFields, allowedProducts, availableKeys, isValidProduct, existingData, curTime, newDataArr, i, updatedDataObj, _i;

        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                requiredFields = ['id', 'type'];
                allowedProducts = ['PL', 'CC', 'HL', 'DL', 'BL', 'MF', 'HLBT', 'LAP'];
                availableKeys = Object.keys(dataObj).filter(function (datItem) {
                  return requiredFields.includes(datItem);
                });

                if (!(requiredFields.length !== availableKeys.length)) {
                  _context7.next = 5;
                  break;
                }

                throw new Error("Some of the compulsory fiels missing. Required fields are - ".concat(requiredFields.join()));

              case 5:
                if (!(!utility.isEmpty(dataObj) && !utility.isEmpty(dataObj.product))) {
                  _context7.next = 9;
                  break;
                }

                isValidProduct = allowedProducts.includes(dataObj.product);

                if (isValidProduct) {
                  _context7.next = 9;
                  break;
                }

                throw new Error("".concat(dataObj.product, " - is not allowed product. Valid values of product key are - ").concat(allowedProducts.join(), " "));

              case 9:
                if (!utility.isEmpty(dataObj)) {
                  if (typeof dataObj.application === 'undefined') {
                    dataObj.application = [];
                  }
                }

                _context7.next = 12;
                return this.getSiteItem(site, 'data');

              case 12:
                existingData = _context7.sent;
                curTime = utility.currentTime();
                dataObj.createdAt = curTime;
                dataObj.updatedAt = curTime;
                newDataArr = [];

                if (!utility.isEmpty(existingData)) {
                  _context7.next = 24;
                  break;
                }

                newDataArr = [dataObj];
                _context7.next = 21;
                return this.setSiteItem(site, 'data', newDataArr);

              case 21:
                return _context7.abrupt("return", true);

              case 24:
                if (!Array.isArray(existingData)) {
                  _context7.next = 58;
                  break;
                }

                if (!utility.isPayloadIdExist(existingData, dataObj.id, dataObj.type)) {
                  _context7.next = 42;
                  break;
                }

                existingData = existingData.map(function (item) {
                  if (item.id === dataObj.id && item.type === dataObj.type) {
                    Object.keys(dataObj).map(function (dataKey) {
                      if (dataKey !== 'application') {
                        item[dataKey] = dataObj[dataKey];
                      }
                    });
                  }

                  return item;
                });
                _context7.next = 29;
                return this.setSiteItem(site, 'data', existingData);

              case 29:
                if (!Array.isArray(dataObj.application)) {
                  _context7.next = 39;
                  break;
                }

                i = 0;

              case 31:
                if (!(i < dataObj.application.length)) {
                  _context7.next = 37;
                  break;
                }

                _context7.next = 34;
                return this.setApplication(site, dataObj.id, dataObj.application[i]);

              case 34:
                i++;
                _context7.next = 31;
                break;

              case 37:
                _context7.next = 40;
                break;

              case 39:
                throw new Error("Application should be of type of Array.");

              case 40:
                _context7.next = 55;
                break;

              case 42:
                updatedDataObj = Object.assign({}, dataObj);
                updatedDataObj.application = [];
                existingData.unshift(updatedDataObj);
                _context7.next = 47;
                return this.setSiteItem(site, 'data', existingData);

              case 47:
                if (!Array.isArray(dataObj.application)) {
                  _context7.next = 55;
                  break;
                }

                _i = 0;

              case 49:
                if (!(_i < dataObj.application.length)) {
                  _context7.next = 55;
                  break;
                }

                _context7.next = 52;
                return this.setApplication(site, dataObj.id, dataObj.application[_i]);

              case 52:
                _i++;
                _context7.next = 49;
                break;

              case 55:
                return _context7.abrupt("return", true);

              case 58:
                throw new Error("Existing data is invalid");

              case 59:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function setData(_x10, _x11) {
        return _setData.apply(this, arguments);
      }

      return setData;
    }()
  }, {
    key: "getData",
    value: function () {
      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(siteId) {
        var id,
            type,
            siteDataArr,
            _args8 = arguments;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                id = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : undefined;
                type = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : undefined;
                _context8.next = 4;
                return this.getSiteItem(siteId, 'data');

              case 4:
                siteDataArr = _context8.sent;

                if (!(utility.isEmpty(id) && utility.isEmpty(type) || utility.isEmpty(siteDataArr))) {
                  _context8.next = 7;
                  break;
                }

                return _context8.abrupt("return", siteDataArr);

              case 7:
                if (!utility.isEmpty(id)) {
                  _context8.next = 9;
                  break;
                }

                return _context8.abrupt("return", siteDataArr.filter(function (datItem) {
                  return datItem.type === type;
                }));

              case 9:
                if (!utility.isEmpty(type)) {
                  _context8.next = 11;
                  break;
                }

                return _context8.abrupt("return", siteDataArr.filter(function (datItem) {
                  return datItem.id === id;
                }));

              case 11:
                return _context8.abrupt("return", siteDataArr.filter(function (datItem) {
                  return datItem.type === type && datItem.id === id;
                }));

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getData(_x12) {
        return _getData.apply(this, arguments);
      }

      return getData;
    }()
  }, {
    key: "getSiteVisit",
    value: function () {
      var _getSiteVisit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(siteId) {
        var siteVisit, maxRetry, _this;

        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getSiteItem(siteId, 'visit');

              case 2:
                siteVisit = _context10.sent;
                maxRetry = 5;
                _this = this;
                _context10.next = 7;
                return new Promise(function (resolve, reject) {
                  var visitCallInterval = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
                    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                      while (1) {
                        switch (_context9.prev = _context9.next) {
                          case 0:
                            _context9.next = 2;
                            return _this.getSiteItem(siteId, 'visit');

                          case 2:
                            siteVisit = _context9.sent;
                            --maxRetry;

                            if (!utility.isEmpty(siteVisit) || maxRetry === 0) {
                              resolve(siteVisit);
                              clearInterval(visitCallInterval);
                            }

                          case 5:
                          case "end":
                            return _context9.stop();
                        }
                      }
                    }, _callee9);
                  })), 500);
                });

              case 7:
                siteVisit = _context10.sent;
                return _context10.abrupt("return", siteVisit);

              case 9:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getSiteVisit(_x13) {
        return _getSiteVisit.apply(this, arguments);
      }

      return getSiteVisit;
    }()
  }, {
    key: "deleteData",
    value: function () {
      var _deleteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(siteId, id, type) {
        var siteDataArr, newSiteData;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (!(utility.isEmpty(id) || utility.isEmpty(type))) {
                  _context11.next = 2;
                  break;
                }

                throw new Error("Id and type required");

              case 2:
                _context11.next = 4;
                return this.getSiteItem(siteId, 'data');

              case 4:
                siteDataArr = _context11.sent;

                if (!utility.isEmpty(siteDataArr)) {
                  _context11.next = 7;
                  break;
                }

                return _context11.abrupt("return", siteDataArr);

              case 7:
                newSiteData = siteDataArr.filter(function (datItem) {
                  return datItem.id !== id && datItem.type !== type;
                });
                _context11.next = 10;
                return this.setSiteItem(siteId, 'data', newSiteData);

              case 10:
                return _context11.abrupt("return", _context11.sent);

              case 11:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function deleteData(_x14, _x15, _x16) {
        return _deleteData.apply(this, arguments);
      }

      return deleteData;
    }()
  }, {
    key: "setApplication",
    value: function () {
      var _setApplication = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(siteId, id, payload) {
        var requiredFields, availableKeys, existingData, isApplicationExist, curTime, filteredPayload, i, _key;

        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (!(utility.isEmpty(id) || utility.isEmpty(payload))) {
                  _context12.next = 2;
                  break;
                }

                throw new Error("id and payload are mandatory fields");

              case 2:
                requiredFields = ['id', 'partnerId', 'partnerName', 'productName', 'image', 'state', 'continueUrl', 'title', 'subtitle'];
                availableKeys = Object.keys(payload).filter(function (datItem) {
                  return requiredFields.includes(datItem);
                });

                if (!(availableKeys.length !== requiredFields.length)) {
                  _context12.next = 6;
                  break;
                }

                throw new Error("Some fields are missing. Required fields are - ".concat(requiredFields.join()));

              case 6:
                _context12.next = 8;
                return this.getSiteItem(siteId, 'data');

              case 8:
                existingData = _context12.sent;

                if (Array.isArray(existingData)) {
                  _context12.next = 11;
                  break;
                }

                throw new Error("Existing data is invalid");

              case 11:
                if (utility.isPayloadIdExist(existingData, id)) {
                  _context12.next = 13;
                  break;
                }

                throw new Error("".concat(id, " - not found site data."));

              case 13:
                isApplicationExist = false;
                curTime = utility.currentTime();
                existingData = existingData.map(function (item) {
                  if (item.id === id) {
                    item.application = item.application.map(function (appItem) {
                      if (appItem.id === payload.id) {
                        isApplicationExist = true;
                        requiredFields.map(function (appKey) {
                          appItem[appKey] = payload[appKey];
                          appItem.updatedAt = curTime;
                        });
                      }

                      return appItem;
                    });
                  }

                  return item;
                });

                if (!isApplicationExist) {
                  filteredPayload = {
                    createdAt: curTime,
                    updatedAt: curTime
                  };

                  for (i = 0; i < requiredFields.length; i++) {
                    _key = requiredFields[i];
                    filteredPayload[_key] = payload[_key];
                  } // existingData.unshift(filteredPayload);


                  existingData = existingData.map(function (item) {
                    if (item.id === id) {
                      item.application.unshift(filteredPayload);
                    }

                    return item;
                  });
                }

                _context12.next = 19;
                return this.setSiteItem(siteId, 'data', existingData);

              case 19:
                return _context12.abrupt("return", _context12.sent);

              case 20:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function setApplication(_x17, _x18, _x19) {
        return _setApplication.apply(this, arguments);
      }

      return setApplication;
    }()
  }, {
    key: "deleteApplication",
    value: function () {
      var _deleteApplication = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(siteId, id, applicationId) {
        var existingData;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                if (!(utility.isEmpty(id) || utility.isEmpty(applicationId))) {
                  _context13.next = 2;
                  break;
                }

                throw new Error("id and applicationID are mandatory fields");

              case 2:
                _context13.next = 4;
                return this.getSiteItem(siteId, 'data');

              case 4:
                existingData = _context13.sent;

                if (utility.isPayloadIdExist(existingData, id)) {
                  _context13.next = 7;
                  break;
                }

                throw new Error("".concat(id, " - does not exist."));

              case 7:
                existingData = existingData.map(function (item) {
                  if (item.id === id) {
                    item.application = item.application.filter(function (appItem) {
                      return appItem.id !== applicationId;
                    });
                  }

                  return item;
                });
                _context13.next = 10;
                return this.setSiteItem(siteId, 'data', existingData);

              case 10:
                return _context13.abrupt("return", _context13.sent);

              case 11:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function deleteApplication(_x20, _x21, _x22) {
        return _deleteApplication.apply(this, arguments);
      }

      return deleteApplication;
    }()
  }]);

  return customStorage;
}();

module.exports = customStorage;