"use strict";

var utility = {
  serializeUrl: function serializeUrl(dataObject, prefix) {
    return (prefix && prefix + '?' || '') + Object.keys(dataObject).map(function (key) {
      return key + '=' + dataObject[key];
    }).join('&');
  },
  xhrRequest: function xhrRequest(method, url, headers, params, options) {
    var _this = this;

    method = method || 'GET';
    headers = headers || {};
    params = params || {};
    options = options || {};
    var withCredentials = false;
    var req = new XMLHttpRequest();
    req.open(method, url, true);
    req.setRequestHeader('content-type', 'application/json');

    for (var key in headers) {
      req.setRequestHeader(key, headers[key]);
    }

    req.withCredentials = withCredentials;
    return new Promise(function (resolve, reject) {
      req.onload = function () {
        return resolve(JSON.parse(this.response || {}));
      };

      req.onerror = function (event) {
        return reject(new Error('somethingWentWrong'));
      };

      if (params) {
        req.send(JSON.stringify(params));
      } else {
        req.send();
      }
    });
  },
  isEmpty: function isEmpty(data) {
    return data === 'undefined' || typeof data === 'undefined' || data === null || data === "" || data.length === 0 || Object.keys(data).length === 0 ? true : false;
  },
  arrayDiff: function arrayDiff(a1, a2) {
    var a = [],
        diff = [];

    for (var i = 0; i < a1.length; i++) {
      a[a1[i]] = true;
    }

    for (var i = 0; i < a2.length; i++) {
      if (a[a2[i]]) {
        delete a[a2[i]];
      }
    }

    for (var k in a) {
      diff.push(k);
    }

    return diff;
  },
  hasRequiredParams: function hasRequiredParams(params, data) {
    return utility.arrayDiff(params, Object.keys(data));
  },
  extend: function extend(obj1, obj2) {
    var obj3 = {};

    for (var attrname in obj1) {
      obj3[attrname] = obj1[attrname];
    }

    for (var attrname in obj2) {
      obj3[attrname] = obj2[attrname];
    }

    return obj3;
  },
  urlParams: function urlParams(prop) {
    if (typeof window === "undefined") return null;
    var params = {};
    var search = decodeURIComponent(window.location.href.slice(window.location.href.indexOf('?') + 1));
    var definitions = search.split('&');
    definitions.forEach(function (val) {
      var parts = val.split('=', 2);
      params[parts[0]] = parts[1];
    });
    if (!prop) return params;
    return prop && prop in params ? params[prop] : null;
  },
  uuid: function uuid() {
    var dt = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = (dt + Math.random() * 16) % 16 | 0;
      dt = Math.floor(dt / 16);
      return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
    return uuid;
  },
  result: function result(object, key, defaultValue) {
    return object[key] || defaultValue;
  },
  currentTime: function currentTime() {
    var dtObj = new Date();
    var dtString = dtObj.toISOString();
    return dtString;
  },
  isPayloadIdExist: function isPayloadIdExist(siteObjList, payloadId, type) {
    if (!type) {
      return siteObjList.filter(function (item) {
        return item.id === payloadId;
      }).length > 0;
    }

    return siteObjList.filter(function (item) {
      return item.id === payloadId && item.type === type;
    }).length > 0;
  },
  isValidPayloadType: function isValidPayloadType(typeName) {
    var validTypeList = ['report', 'lead'];
    return validTypeList.includes(typeName);
  },
  debounce: function debounce(callback, wait) {
    var timeoutId = null;
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      window.clearTimeout(timeoutId);
      timeoutId = window.setTimeout(function () {
        callback.apply(null, args);
      }, wait);
    };
  },
  secretKey: 'PBGUC'
};
module.exports = utility;