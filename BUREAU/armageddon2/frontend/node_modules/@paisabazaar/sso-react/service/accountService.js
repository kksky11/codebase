const utility   = require('../utility');
const crypto    = require('crypto-js/aes');

function AccountService () {

    this.setSessionCookie   = function (accountsUrl, glssToken) {
        var element             = document.createElement('img');
        element.src             = accountsUrl + '/SSOSP/api/v1/customer/setSSID?glssToken=' + glssToken;
        element.style.display   = "none";
        element.alt             = "";
        document.body.appendChild(element);
    }

    this.unsetSessionCookie = function (accountsUrl, glssToken) {
        var element = document.createElement('img');
        element.src             = accountsUrl + '/SSOSP/api/v1/customer/unsetSSID?glssToken=' + glssToken;
        element.alt             = "";
        element.style.display   = "none";
        document.body.appendChild(element);
    }

    this.getAuthorizeData   = function (accountsUrl, data) {
        var _this         = this;

        return utility.xhrRequest (
            'POST',
            accountsUrl + '/SSOSP/api/v1/oauth/authorize',
            {},
            data
        )
        .then(function (result) {
            if (true === result.data.status) {
                //Set cookie
                data.tokenSource && data.tokenSource === 'cookie' && _this.setSessionCookie(accountsUrl, result.data.response.glssToken);

                return Promise.resolve(result.data.response);
            }

            return Promise.reject(new Error(result.data.statusCode));
        })
        .catch(function (error) {
            var statusCode = error.response && error.response.data.statusCode;

            if (error.message === 'invalidOrExpiredSession' || statusCode === 'invalidOrExpiredSession') {
                data.tokenSource && data.tokenSource === 'cookie' && _this.unsetSessionCookie(accountsUrl, data.glss_token);
            }

            var authError       = new Error(error.response && error.response.data && error.response.data.statusCode || error.message)
            authError.response  = error.response.data.response || {};
            return Promise.reject(authError);
        });
    }

    this.sendOtp            = function (accountsUrl, siteId, encryptionKey, data) {
        var token = crypto.encrypt(
            [
                siteId,
                (new Date).toISOString(),
                data.mobileNo
            ].join('_'),
            encryptionKey
        );

        return utility.xhrRequest (
            'POST',
            accountsUrl + '/SSOSP/api/v1/customer/otp',
            {
                'site-id'           : siteId,
                'authorization-key' : token
            },
            data
        )
        .then(function (result) {
            if (true === result.data.status) {
                return Promise.resolve(result.data.response);
            }

            return Promise.reject(new Error(result.data.statusCode));
        })
        .catch(function (error) {
            return Promise.reject(new Error(error.message || error.response.data.statusCode));
        });
    }

    this.logout             = function (accountsUrl, glssToken, data) {
        var _this         = this;

        return utility.xhrRequest (
            'GET',
            accountsUrl + '/SSOSP/api/v1/oauth/logout?' + utility.serializeUrl(data),
            {
                'glss-token'    : glssToken
            },
            {}
        )
        .then(function (result) {
            if (true === result.data.status) {
                //UnSet cookie
                data.tokenSource && data.tokenSource === 'cookie' && _this.unsetSessionCookie(accountsUrl, glssToken);

                return Promise.resolve(result.data.response);
            }

            return Promise.reject(new Error(result.data.statusCode));
        })
        .catch(function (error) {
            return Promise.reject(new Error(error.message || error.response.data.statusMessage));
        });
    }

    this.encrypt            = function (plainText, encytionKey) {
        return crypto.encrypt(plainText, encytionKey).toString();
    }

    this.checkPreference    = function (accountsUrl, siteId, data) {
        return utility.xhrRequest (
            'GET',
            accountsUrl + '/SSOSP/api/v1/customer/preference?mobileNo=' + data.mobileNo,
            {
                'site-id'           : siteId,
            },
            {}
        )
        .then(function (result) {
            if (true === result.data.status) {
                return Promise.resolve(result.data.response);
            }

            return Promise.reject(new Error(result.data.statusCode));
        })
        .catch(function (error) {
            return Promise.reject(new Error(error.message || error.response.data.statusCode));
        });
    }
};

module.exports  = (new AccountService);