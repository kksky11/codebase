const request       = require('axios');

const utility   = {
    serializeUrl        : function (dataObject, prefix) {
        return (prefix && prefix + '?' || '') + Object.keys(dataObject).map(function (key) {
            return key + '=' + dataObject[key]
        }).join('&');
    },

    xhrRequest          : function (method, url, headers, params, options) {
        method  = method || 'GET';
        headers = headers || {};
        params  = params || {};
        options = options || {};

        var requestOptions = {
            url         : url,
            method      : method,
            headers     : headers,
            data        : params,       
            json        : true,
            body        : !options.type || options.type === 'json' ? params : null,
            form        : options.type && options.type === 'form' ? params : null,
            timeout     : options.timeout || 100000,
            strictSSL   : false
        };

        return request(requestOptions);
    },

    getCookie           : function (cookieName) {
        var name        = cookieName;
        var nameEQ      = name + "=";
        var ca          = document.cookie.split(';');

        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];

            while (c.charAt(0) === ' ') {
                c = c.substring(1, c.length);
            }

            if (c.indexOf(nameEQ) === 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }

        return null;
    },

    isEmpty             : function (data) {
        return data === 'undefined' || typeof data === 'undefined' || data === null || data === "" || data.length === 0 || Object.keys(data).length === 0 ? true : false;
    },

    arrayDiff           : function (a1, a2) {
        var a = [], diff = [];

        for (var i = 0; i < a1.length; i++) {
            a[a1[i]] = true;
        }

        for (var i = 0; i < a2.length; i++) {
            if (a[a2[i]]) {
                delete a[a2[i]];
            }
        }

        for (var k in a) {
            diff.push(k);
        }

        return diff;
    },

    hasRequiredParams   : function (params, data) {
        return utility.arrayDiff(params, Object.keys(data));
    },

    extend              : function (obj1, obj2) {
        var obj3 = {};
        for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
        for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
        return obj3;
    },

    urlParams           : function (prop) {
        if (typeof window === "undefined") return null;

        var params      = {};
        var search      = decodeURIComponent( window.location.href.slice( window.location.href.indexOf( '?' ) + 1 ) );
        var definitions = search.split( '&' );

        definitions.forEach( function( val) {
            var parts               = val.split( '=', 2 );
            params[ parts[ 0 ] ]    = parts[ 1 ];
        } );

        if (!prop) return params;
            
        return ( prop && prop in params ) ? params[ prop ] : null;
    }
};


module.exports  = utility;